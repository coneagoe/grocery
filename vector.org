* [[http://www.sgi.com/tech/stl/Vector.html][vector]]
** Trap
*** vector会调用element的copy constructor
    vector会调用element的copy constructor创建一个新的object，将该object作为element存入vector。(所以你要注意Sequence的condition)

#+BEGIN_SRC C++
    #include <iostream>
    #include <vector>

    using namespace std;

    class Data {
    public:
        Data()
        {
            cout << "Data()" << endl;
        }

        Data(const int i): m_i(i)
        {
            cout << "Data(const int i): " << m_i << endl;
        }

        ~Data()
        {
            cout << "~Data(): " << m_i << endl;
        }

        Data(const Data & data): m_i(data.m_i)
        {
            cout << "Data(const Data & data): " << m_i << endl;
        }

    private:
        int m_i;
    };

    int main ()
    {
        {
            vector<Data> v;

            for(int i = 0; i < 3; i++) {
                v.push_back(Data(i));
            }
        }

        return 0;
    }
#+END_SRC

    Results:
#+BEGIN_EXAMPLE
    Data(const int i): 0
    Data(const Data & data): 0
    ~Data(): 0
    Data(const int i): 1
    Data(const Data & data): 1
    Data(const Data & data): 0
    ~Data(): 0
    ~Data(): 1
    Data(const int i): 2
    Data(const Data & data): 2
    Data(const Data & data): 0
    Data(const Data & data): 1
    ~Data(): 0
    ~Data(): 1
    ~Data(): 2
    ~Data(): 0
    ~Data(): 1
    ~Data(): 2
#+END_EXAMPLE

*** vector会暗中reallocate memory
    例子见上

*** iterator, pointer的有效性
    因为上面reallocate 
    memory的原因，之前保留的iterator和pointer还有效吗？答案是可能会无效。([2] ... It 
    does, however, increase capacity(), and it invalidates [5] any iterators 
    that point into the vector. [5] A vector's iterators are invalidated when 
    its memory is reallocated. ...)

#+BEGIN_SRC C++
    #include <iostream>
    #include <vector>

    using namespace std;

    int main() {
        vector<int> v;

        v.push_back(1);
        vector<int>::iterator it = v.begin();

        v.push_back(2);
        v.push_back(3);
        v.push_back(4);
        v.push_back(5);

        * it = 10;
        cout << * (v.begin()) << endl;

        return 0;
    }
#+END_SRC

    Output:
#+BEGIN_EXAMPLE
    1
    *** starting debugger for pid 9208, tid 11360
    *** continuing pid 9208 from debugger call (1)
    Aborted (core dumped)
#+END_EXAMPLE

#+BEGIN_SRC C++
    #include <iostream>
    #include <vector>

    using namespace std;

    int main() {
        vector<int> v;

        v.push_back(1);
        int * p = &v[0];

        v.push_back(2);
        v.push_back(3);
        v.push_back(4);
        v.push_back(5);

        * p = 10;
        cout << v[0] << endl;

        return 0;
    }
#+END_SRC

    Output:
#+BEGIN_EXAMPLE
    1
    *** starting debugger for pid 5904, tid 10548
    *** continuing pid 5904 from debugger call (1)
    Aborted (core dumped)
#+END_EXAMPLE

*** 什么时候会reallocate memory？
    * Memory will be reallocated automatically if more than capacity() - size() elements are inserted into the vector. (这包括push\_back() / insert()。)

    * reserve() causes a reallocation manually. (resize()也有可能。)

    * 除了这些就安全了吗？pop\_back() / erase() / clear()可能会造成之前的iterator / pointer无效。swap()虽然不会造成crash，但是element value真的是你想要的吗？

*** 开销
    我们从前面的例子知道vector会调用element的copy 
    constructor，那么在container的选择上就需要考虑这一点。到底什么才是适合的。
    [5] Vector is usually preferable to deque and list. Deque is useful in the 
    case of frequent insertions at both the beginning and end of the sequence, 
    and list and slist are useful in the case of frequent insertions in the 
    middle of the sequence. In almost all other situations, vector is more 
    efficient. 

** Sidelights
*** vector和element分别分配在哪里？
    我们以vector分配在stack上为例。

#+BEGIN_SRC C++
    #include <vector>
    #include <iostream>

    using namespace std;

    int main()
    {
        vector<int> v;

        v.push_back(1);
        v.push_back(2);

        cout << hex << &v[0] << endl;

        while(1) {}

        return 0;
    }
#+END_SRC

#+BEGIN_EXAMPLE
    0x600010470
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    cat /proc/5624/maps

    600000000-60060000 rw-p 00000000 0000:00000                 [heap]
    60006000-620000000 ===p 00060000 0000:000 0                 [heap]
#+END_EXAMPLE

    我们可以看到element在heap。
